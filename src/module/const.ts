export const MODULENAME = 'pf2e-animist-spell';
export const DAILY =
  "const key = 'apparition';\nconst uuid = 'Compendium.pf2e-playtest-data.war-of-immortals-playtest-class-features.Item.513BswuSPSPQdX1v';\nconst label = 'Apparition';\n\nfunction hasFeat(actor, slug) {\n  return actor.feats.contents[1].feats.find((e) => e.feat.slug == slug) != undefined;\n}\nfunction getEntriesSpontaneous(actor) {\n  return actor.spellcasting.filter((entry) => entry.isSpontaneous);\n}\nfunction getEntriesFocus(actor) {\n  return actor.spellcasting.filter((entry) => entry.isFocusPool);\n}\n\nconst apparitionDaily = {\n  key: 'apparition',\n  label: 'Apparition',\n  item: {\n    uuid: 'Compendium.pf2e-playtest-data.war-of-immortals-playtest-class-features.Item.513BswuSPSPQdX1v',\n    condition: ({ actor }) => getEntriesSpontaneous(actor).length >= 1 && getEntriesFocus(actor).length >= 1,\n  },\n  rows: [\n    {\n      type: 'select',\n      slug: 'entryFocus',\n      label: 'Spellcasting Vessel Entry',\n      options: ({ actor }) => getEntriesFocus(actor).map((entry) => ({ label: entry.name, value: entry.id })),\n      condition: ({ actor }) => getEntriesFocus(actor).length > 1,\n    },\n    {\n      type: 'select',\n      slug: 'entrySpontaneous',\n      label: 'Spellcasting Apparition Entry',\n      options: ({ actor }) => getEntriesSpontaneous(actor).map((entry) => ({ label: entry.name, value: entry.id })),\n      condition: ({ actor }) => getEntriesSpontaneous(actor).length > 1,\n    },\n    {\n      type: 'drop',\n      slug: 'first',\n      label: 'First Apparition',\n      filter: {\n        type: 'feat',\n        search: {},\n      },\n    },\n    {\n      type: 'drop',\n      slug: 'second',\n      label: 'Second Apparition',\n      filter: {\n        type: 'feat',\n        search: {},\n      },\n    },\n    {\n      type: 'drop',\n      slug: 'third',\n      label: 'Third Apparition',\n      filter: {\n        type: 'feat',\n        search: {},\n      },\n      condition: ({ actor }) => hasFeat(actor, 'third-apparition'),\n    },\n    {\n      type: 'drop',\n      slug: 'fourth',\n      label: 'Fourth Apparition',\n      filter: {\n        type: 'feat',\n        search: {},\n      },\n      condition: ({ actor }) => hasFeat(actor, 'fourth-apparition'),\n    },\n  ],\n  process: async ({ utils, fields, addFeat, addItem, messages, actor }) => {\n    const entryApparitionId = fields.entrySpontaneous?.value ?? getEntriesSpontaneous(actor)[0].id;\n    const entryVesselId = fields.entryFocus?.value ?? getEntriesFocus(actor)[0].id;\n    const highestRank = actor.spellcasting.collections.get(entryApparitionId).highestRank;\n    const arraySpellSource = [];\n\n    actor.setFlag('pf2e-animist-spell', 'spellEntry', entryApparitionId);\n    actor.setFlag('pf2e-animist-spell', 'spellFocusEntry', entryVesselId);\n    messages.addGroup('apparitions', undefined, 'Apparitions attuned');\n    for (const field in fields) {\n      if (field == 'entryFocus' || field == 'entrySpontaneous') {\n        continue;\n      }\n      const uuid = fields[field].uuid;\n      const source = await utils.createFeatSource(uuid);\n      const flagDisperse = { 'pf2e-animist-spell': { dispersed: false } };\n      const flagPrimary = { 'pf2e-animist-spell': { primary: field == 'first' ? true : false } };\n      source.flags = foundry.utils.mergeObject(flagDisperse, flagPrimary, { recursive: true });\n\n      const lores = await game.modules\n        .get('pf2e-animist-spell')\n        .api.ApparitionParser.lores(uuid)\n        .map((e) => 'Apparition : ' + e);\n      const flagLore = { 'pf2e-animist-spell': { lores: lores } };\n      source.flags = foundry.utils.mergeObject(source.flags, flagLore, { recursive: true });\n\n      addFeat(source);\n\n      let loreProf;\n\n      if (actor.level >= 16) {\n        loreProf = 3;\n      } else if (actor.level >= 8) {\n        loreProf = 2;\n      } else {\n        loreProf = 1;\n      }\n\n      for (const i in lores) {\n        const loreSource = utils.createLoreSource({ name: lores[i], rank: loreProf });\n        addItem(loreSource);\n      }\n\n      const spells = await game.modules.get('pf2e-animist-spell').api.ApparitionParser.spell(uuid, highestRank);\n\n      for (const spell of spells) {\n        const index = arraySpellSource.findIndex((e) => e.system.slug == spell.spell.system.slug);\n        if (index >= 0) {\n          arraySpellSource[index].flags['pf2e-animist-spell'].source.push(source.system.slug);\n          continue;\n        }\n\n        const spellSource = await utils.createSpellSource(spell.spell.uuid);\n\n        spellSource.system.location.value = entryApparitionId;\n        spellSource.system.traits.value.push('Apparition');\n        if (!spellSource.system.traits.value.find((e) => e == 'cantrip')) {\n          spellSource.system.location.signature = true;\n          spellSource.system.location.heightenedLevel = spell.rank;\n        }\n        spellSource.flags = {\n          'pf2e-animist-spell': {\n            source: [source.system.slug],\n          },\n        };\n\n        arraySpellSource.push(spellSource);\n      }\n\n      const vesselSpell = await game.modules.get('pf2e-animist-spell').api.ApparitionParser.vesselSpell(uuid);\n      const vesselSpellSource = await utils.createSpellSource(vesselSpell.uuid);\n      vesselSpellSource.system.location.value = entryVesselId;\n      vesselSpellSource.system.traits.value.push('Vessel');\n      addItem(vesselSpellSource);\n\n      messages.add('apparitions', { uuid, label: source.name });\n    }\n\n    for (const spellSOurce of arraySpellSource) {\n      addItem(spellSOurce);\n    }\n  },\n};\n\nreturn apparitionDaily;\n";
